{"version":3,"sources":["components/mainbody/mainbody.module.css","components/footer/footer.module.css","assets/twinpeaksheader.png","components/header/header.module.css","components/header/Header.js","components/mainbody/MainBody.js","components/footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","href","className","styles","img","src","headerImg","alt","MainBody","mainbody","target","rel","invertText","codeBlock","Footer","footerDiv","footerP","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,WAAa,6BAA6B,UAAY,8B,gBCA9GD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,QAAU,0B,kBCDlED,EAAOC,QAAU,IAA0B,6C,gBCC3CD,EAAOC,QAAU,CAAC,IAAM,sB,yLCcTC,EAXA,WACb,OACE,6BACE,uBAAGC,KAAK,MACN,yBAAKC,UAAWC,IAAOC,IACrBC,IAAKC,IAAWC,IAAI,2C,gBCkHfC,EAxHE,WACf,OACE,yBAAKN,UAAWC,IAAOM,UAAvB,6DAC4D,uBACxDR,KAAK,4BACLS,OAAO,SAASC,IAAI,uBAFoC,MAD5D,wDAIqC,uBAAGV,KAAK,4CACzCS,OAAO,SAASC,IAAI,uBADa,QAJrC,IAOE,2BACE,0BAAMT,UAAWC,IAAOS,YAAxB,sBAAuD,uBACrDX,KAAK,oCACLS,OAAO,SAASC,IAAI,uBAFiC,uCAMzD,4QAQA,2BACE,0BAAMT,UAAWC,IAAOS,YAAxB,iBACA,4BACE,wBAAIV,UAAWC,IAAOU,WACpB,uBACEZ,KAAK,qDACLS,OAAO,SAASC,IAAI,uBAFtB,uDAMF,wBAAIT,UAAWC,IAAOU,WACpB,uBAAGZ,KAAK,iDACNS,OAAO,SAASC,IAAI,uBADtB,qDAQN,8YASA,2BACE,0BAAMT,UAAWC,IAAOS,YAAxB,qBACA,4BACE,wBAAIV,UAAWC,IAAOU,WACpB,uBAAGZ,KAAK,8EACNS,OAAO,SAASC,IAAI,uBADtB,2DAKF,wBAAIT,UAAWC,IAAOU,WACpB,uBAAGZ,KAAK,qEACNS,OAAO,SAASC,IAAI,uBADtB,uEAKF,wBAAIT,UAAWC,IAAOU,WACpB,uBAAGZ,KAAK,uEACNS,OAAO,SAASC,IAAI,uBADtB,yEAKF,wBAAIT,UAAWC,IAAOU,WACpB,uBAAGZ,KAAK,kGACNS,OAAO,SAASC,IAAI,uBADtB,iFAQN,2BACE,0BAAMT,UAAWC,IAAOS,YAAxB,kBACA,4BACE,wBAAIV,UAAWC,IAAOU,WACpB,uBAAGZ,KAAK,0EACNS,OAAO,SAASC,IAAI,uBADtB,uDAKF,wBAAIT,UAAWC,IAAOU,WACpB,uBAAGZ,KAAK,6DACNS,OAAO,SAASC,IAAI,uBADtB,iEAQN,yOAQA,gPAIK,uBAAGV,KAAK,0BACTS,OAAO,SAASC,IAAI,uBADnB,2BAJL,qB,gBC1FSG,EAlBA,WACb,OACE,yBAAKZ,UAAWC,IAAOY,WAAvB,oEACmE,uBAC/Dd,KAAK,4BAA4BS,OAAO,SAASC,IAAI,uBADU,6BAIjE,uBAAGT,UAAWC,IAAOa,SAArB,8BAC6B,uBACzBf,KAAK,gCACLS,OAAO,SAASC,IAAI,uBAFK,UAD7B,MAIE,uBAAGV,KAAK,0CACNS,OAAO,SAASC,IAAI,uBADtB,aAJF,a,MCQSM,MAZf,WACE,OACE,yBAAKf,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,OAEF,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7832dccf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainbody\":\"mainbody_mainbody__2po7K\",\"invertText\":\"mainbody_invertText__1sA-G\",\"codeBlock\":\"mainbody_codeBlock__2Udlf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footerDiv\":\"footer_footerDiv__1-sFD\",\"footerP\":\"footer_footerP__3Y3_E\"};","module.exports = __webpack_public_path__ + \"static/media/twinpeaksheader.04f4a24c.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"header_img__2KRuG\"};","import React from 'react';\nimport headerImg from '../../assets/twinpeaksheader.png';\nimport styles from './header.module.css';\n\nconst Header = () => {\n  return (\n    <div>\n      <a href=\"./\">\n        <img className={styles.img}\n          src={headerImg} alt=\"Welcome to Twin Peaks, the REST API\"></img>\n      </a>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport styles from './mainbody.module.css';\n\nconst MainBody = () => {\n  return (\n    <div className={styles.mainbody}>\n      Welcome to Twin Peaks, the REST API, the landing page, by <a\n        href=\"https://www.jonforney.com\"\n        target=\"_blank\" rel=\"noopener noreferrer\">me</a>, Jon. You can view\n        the Github repo for this project <a href=\"https://github.com/MustardJoe/boat-server\"\n        target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n      \n      <p>\n        <span className={styles.invertText}>The API is live at <a\n          href=\"https://twin-peaks.herokuapp.com/\" \n          target=\"_blank\" rel=\"noopener noreferrer\"\n        >https://twin-peaks.herokuapp.com/</a></span>\n      </p>\n\n      <p>\n        Routes from this API return two types of\n        data, Character information and Quotes. Querry the specific routes\n        provided to return data. The two paths are listed below, each of which\n        {/* eslint-disable-next-line react/no-unescaped-entities */}\n        provides an array of all of that path's respective data:\n      </p>\n\n      <p>\n        <span className={styles.invertText}>basic routes:</span>\n        <ul>\n          <li className={styles.codeBlock}>\n            <a\n              href=\"https://twin-peaks.herokuapp.com/api/v1/characters\"\n              target=\"_blank\" rel=\"noopener noreferrer\">\n              https://twin-peaks.herokuapp.com/api/v1/characters\n            </a>\n          </li>\n          <li className={styles.codeBlock}>\n            <a href=\"https://twin-peaks.herokuapp.com/api/v1/quotes\"\n              target=\"_blank\" rel=\"noopener noreferrer\">\n            https://twin-peaks.herokuapp.com/api/v1/quotes\n            </a>\n          </li>\n        </ul>\n      </p>\n\n      <p>\n        The Routes below return sorted data, either single data items that are specifically\n        requested by id, or aggregations of various types, which return things like an\n        indvidual character with all of their questes, or a random quote with the associated\n        character information included. Please play around with them and have fun learning,\n        {/* eslint-disable-next-line react/no-unescaped-entities */}\n        that's what this REST API is for.\n      </p>\n\n      <p>\n        <span className={styles.invertText}>characters routes</span>\n        <ul>\n          <li className={styles.codeBlock}>\n            <a href=\"https://twin-peaks.herokuapp.com/api/v1/characters/5e8fb51f959b3e0017376fa0\"\n              target=\"_blank\" rel=\"noopener noreferrer\">\n            https://twin-peaks.herokuapp.com/api/v1/characters/:id\n            </a>\n          </li>\n          <li className={styles.codeBlock}>\n            <a href=\"https://twin-peaks.herokuapp.com/api/v1/characters/randomCharacter\"\n              target=\"_blank\" rel=\"noopener noreferrer\">\n            https://twin-peaks.herokuapp.com/api/v1/characters/randomCharacter\n            </a>\n          </li>\n          <li className={styles.codeBlock}>\n            <a href=\"https://twin-peaks.herokuapp.com/api/v1/characters/allCharsAllQuotes\"\n              target=\"_blank\" rel=\"noopener noreferrer\">\n            https://twin-peaks.herokuapp.com/api/v1/characters/allCharsAllQuotes\n            </a>\n          </li>\n          <li className={styles.codeBlock}>\n            <a href=\"https://twin-peaks.herokuapp.com/api/v1/characters/characterWithQuotes/5e8fb51f959b3e0017376fa0\"\n              target=\"_blank\" rel=\"noopener noreferrer\">\n            https://twin-peaks.herokuapp.com/api/v1/characters/characterWithQuotes/:id\n            </a>\n          </li>\n        </ul>\n      </p>\n\n      <p>\n        <span className={styles.invertText}>quotes routes:</span>\n        <ul>\n          <li className={styles.codeBlock}>\n            <a href=\"https://twin-peaks.herokuapp.com/api/v1/quotes/5e93faf4ca886b0017ded34f\"\n              target=\"_blank\" rel=\"noopener noreferrer\">\n            https://twin-peaks.herokuapp.com/api/v1/quotes/:id\n            </a>\n          </li>\n          <li className={styles.codeBlock}>\n            <a href=\"https://twin-peaks.herokuapp.com/api/v1/quotes/randomQuote\"\n              target=\"_blank\" rel=\"noopener noreferrer\">\n            https://twin-peaks.herokuapp.com/api/v1/quotes/randomQuote\n            </a>\n          </li>\n        </ul>\n      </p>\n\n      <p>\n        {/* eslint-disable-next-line react/no-unescaped-entities */}\n        *The routes ending in ':id' require a character or quote id (the id supplied by the \n        {/* eslint-disable-next-line react/no-unescaped-entities */}\n        MongoDB in the '_id' field for each character and quote entry).\n        To find that information, qerry the two main routes.\n      </p>\n\n      <p>\n        Please note, the information regarding how to consume this site\n        assumes the user is familure with the basic REST API concept. If you would\n        like more information on the basics of this topic, please head over \n        to <a href=\"https://restfulapi.net/\"\n          target=\"_blank\" rel=\"noopener noreferrer\">https://restfulapi.net/</a> to\n        learn more.\n      </p>\n    </div>\n  );\n};\n\nexport default MainBody;\n","import React from 'react';\nimport styles from './footer.module.css';\n\nconst Footer = () => {\n  return (\n    <div className={styles.footerDiv}>\n      Thanks for visiting, and please check out more of my projects on <a\n        href=\"https://www.jonforney.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n        https://www.jonforney.com\n      </a>\n      <p className={styles.footerP}>\n        You can also find me at my <a\n          href=\"https://github.com/MustardJoe\"\n          target=\"_blank\" rel=\"noopener noreferrer\">Github</a> or\n        <a href=\"https://www.linkedin.com/in/jon-forney/\"\n          target=\"_blank\" rel=\"noopener noreferrer\"> LinkedIn</a> pages.\n      </p>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport Header from './components/header/Header';\nimport MainBody from './components/mainbody/MainBody';\nimport Footer from './components/footer/Footer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Header />\n      </header>\n      <MainBody />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}